Django_QuerySet:
Field lookups:

exact (=)
----------
Entry.objects.get(id__exact=14)
Entry.objects.get(id__exact=None)

SQL equivalents:
SELECT ... WHERE id = 14;
SELECT ... WHERE id IS NULL;

iexact(like)
--------------
Blog.objects.get(name__iexact='beatles blog')
Blog.objects.get(name__iexact=None)

SQL equivalents:
SELECT ... WHERE name ILIKE 'beatles blog';
SELECT ... WHERE name IS NULL;

contains (like '% %')
------------..

Entry.objects.get(headline__contains='Lennon')

SQL equivalent:
SELECT ... WHERE headline LIKE '%Lennon%'; [Note this will match the headline 'Lennon honored today' but not 'lennon honored today'.]

icontains
-------------------

Entry.objects.get(headline__icontains='Lennon')

SQL equivalent:
SELECT ... WHERE headline ILIKE '%Lennon%'; [Case-insensitive containment test]


============= filter ==============================

in
------------------
Entry.objects.filter(id__in=[1, 3, 4])
Entry.objects.filter(headline__in='abc')

SQL equivalents:
SELECT ... WHERE id IN (1, 3, 4);
SELECT ... WHERE headline IN ('a', 'b', 'c')

--------------------------------

inner_qs = Blog.objects.filter(name__contains='Cheddar')
entries = Entry.objects.filter(blog__in=inner_qs)

SELECT ... WHERE blog.id IN (SELECT id FROM ... WHERE NAME LIKE '%Cheddar%')

-----------------------------------

If you pass in a QuerySet resulting from values() or values_list() as the value to an __in lookup, you need to ensure you are only extracting one field in the result. For example, this will work (filtering on the blog names):

inner_qs = Blog.objects.filter(name__contains='Ch').values('name')
entries = Entry.objects.filter(blog__name__in=inner_qs)

range
------------------
import datetime
start_date = datetime.date(2005, 1, 1)
end_date = datetime.date(2005, 3, 31)
Entry.objects.filter(pub_date__range=(start_date, end_date))

SELECT ... WHERE pub_date BETWEEN '2005-01-01' and '2005-03-31';


